chapter: chpt_abilities
text: Abilities
sections:
- section: sec_abilities_general
  text: General
  rules:
  - subsection: rule_ability
    text: An {term:ability} is an independent unit of text on a card or counter, a basic action, or the basic trash ability.
    rules:
    - rule: rule_all_text_is_an_ability
      text: All rules text on a card or counter is part of an ability.
    - rule: rule_basic_action_link
      text: The basic actions are defined in {ref:TODO} and {ref:TODO}.
    - rule: rule_trash_ability_link
      text: The basic trash ability is defined in {ref:TODO}.
    - rule: rule_lingering_effects_link
      text: An ability's text can include other abilities that it could grant to cards or counters or introduce directly to the game state. See also {sec_lingering_effects}.
    - rule: rule_ability_categories
      text: Each ability is categorized as either a static ability ({ref:sec_static_abilities}), a paid ability ({ref:sec_paid_abilities}), a conditional ability ({ref:sec_conditional_abilities}), a play ability ({ref:sec_play_abilities}), or a subroutine ({ref:sec_subroutines}).
    - rule: rule_interrupt_link
      text: Abilities marked with [interrupt] or that include the words "prevent" or "avoid" in their instructions have special timing rules that differ from other abilities. See {ref:sec_interrupts_replacements}.

  - subsection: rule_resolve_ability
    text: To {term:resolve an ability} means to resolve each of that ability's instructions in the order they appear. If an ability contains more than one instruction, a checkpoint occurs between each consecutive instruction. To {term:resolve an instruction} means to carry out that instruction.
    rules:
    - rule: rule_chain_reaction
      text: While resolving an ability, other abilities can meet their conditions. When this happens, a "chain reaction" is created. The current instruction finishes resolving, then more recent abilities fully resolve before the next instruction of the original ability. If any other abilities meet their conditions while resolving the "chained" abilities, then another "chain" is created before continuing to resolve the previous chained abilities. Resolve each set of chained abilities one at a time, from the most recently met condition to the oldest, before continuing with the original ability that started the chain reaction.
      examples:
      - text: The Runner's identity is {card:Armand "Geist" Walker}. They access a {card:Snare!} from R&D with only 2 cards in their grip. Before taking a tag or suffering any net damage, the Runner triggers {card:Decoy}'s ability in order to avoid the tag. Using the {card:Decoy} meets the trigger condition of {card:Geist}'s ability. As this is the most recent ability to meet its trigger condition, {card:Geist}'s ability must resolve first, before {card:Decoy} avoids the tag and before {card:Snare!} finishes resolving. The Runner draws a card from {card:Geist}, avoids the tag from {card:Snare!} with {card:Decoy}, and then finally suffers (and survives) the 3 net damage from {card:Snare!}.

  - subsection: rule_source
    text: The {term:source} of an ability is the card, counter, or game rule that originated it.
    rules:
    - rule: rule_source_printed_abilities
      text: Each card is the source of its own printed abilities.
    - rule: rule_source_granted_abilities
      text: If something grants an ability to an object (see {ref:rule_gaining_losing_abilities}), the source of the granted ability is that object, not whatever granted the ability.
    - rule: rule_source_lingering_effect
      text: The source of an ability that is being maintained by a lingering effect is the object that created that lingering effect. See {ref:sec_lingering_effects}.

  - rule: rule_abilities_resolution_independent
    text: Each paid ability, conditional ability, and subroutine becomes independent of its source at a certain point before it resolves, as described in {ref:TODO}, {ref:TODO}, and {ref:TODO}, respectively. If the source changes zones after that point, the ability cannot act on the source.
    examples:
    - text: The runner plays {card:Compile}, uses it to install {card:Mayfly} during the resulting run, and breaks subroutines with {card:Mayfly} during that run. When the run ends, delayed conditional abilities from both {card:Mayfly} and {card:Compile} become pending. The Runner decides to resolve {card:Compile} first, adding {card:Mayfly} to the bottom of their stack. The Runner then resolves the ability from {card:Mayfly}, which instructs them to trash its source program. Because {card:Mayfly} has changed zones, the copy of it on the bottom of the stack is a new object. With nothing to trash, the ability from {card:Mayfly} does nothing.

  - subsection: rule_effect
    text: Whereas an ability, instruction, or declaration is made up of text, an {term:effect} is what happens in the game because of that text.
    rules:
    - rule: rule_effect_beyond_resolution
      text: Any of a non-static ability's effects that apply beyond the duration of that ability's resolution become independent of that ability and its source. The game engine takes responsibility for managing these {term:lingering effects} directly, and deletes them from the game state as their durations expire. See {ref:sec_lingering_effects}.
    - rule: rule_determining_potential_to_change_game_state
      text: When determining whether a certain ability has the potential to change the game state, look only at the expected effects of the ability. Do not consider its costs or restrictions, and do not consider other abilities that could become pending or relevant because of triggering or resolving the ability. See {ref:rule_ncigs} of the Golden Rules.

  - subsection: rule_using
    text: Any time a player chooses to resolve an optional ability or an optional part of an ability, the player is considered to be {term:using} that ability and the source card of that ability. Players do not "use" abilities that are entirely mandatory.
    rules:
    - rule: rule_paid_ability_used_condition
      text: A paid ability is considered used once the trigger cost has been paid. See {ref:TODO} for the steps of using a paid ability.
    - rule: rule_conditional_ability_used_condition
      text: A conditional ability is considered used once the relevant optional effects of the ability have been resolved by the controller of the ability. See {ref:TODO} for the steps of triggering and resolving conditional abilities.
    - rule: rule_hosted_counter_used_condition
      text: If an ability allows a player to spend or move counters, that ability's source card is considered used at the time the player pays a cost by spending or moving those counters, even if the counters are spent or moved from cards other than the card that is the source of that ability.
      examples:
      - text: The Runner spends the credit hosted on {card:Cyberfeeder} to pay the trigger cost of {card:Mimic}'s ability. Because the Runner triggered {card:Mimic}'s paid ability and {card:Cyberfeeder}'s ability allowed the credit to be spent, both {card:Mimic} and {card:Cyberfeeder} have been used.
    - rule: rule_use_ncigs_link
      text: A player can only use an ability if its effect has the potential to change the game state. See {ref:rule_ncigs}.

  - rule: rule_ability_active
    text: Abilities are {term:active} if they are eligible to be resolved or apply to the current game state, and {term:inactive} otherwise. By default, a card's abilities are active if and only if that card is active (see {ref:rule_active_cards}). Abilities of counters are active for as long as the counter exists.

  - subsection: rule_ability_active_inactive_source_card
    text: Some types of abilities are active even while their source card is inactive.
    rules:
    - rule: rule_active_exception_access
      text: Conditional abilities that meet their conditions when their source card is accessed are active even while that card is inactive.
    - rule: rule_active_exception_catchall
      text: Abilities stating that they are active in a particular zone are active in that zone. Abilities that can only ever meet their conditions in a particular zone are active in that zone. Abilities that can only affect the game state from a particular zone are active in that zone. When determining whether these stipulations apply, refer only to the game rules, not to any other effects that may be changing how cards move between zones.
      examples:
      - text: |-
          {card:I've Had Worse} has an ability that meets its trigger condition when it is trashed due to damage. Normally, this can only occur by moving {card:I've Had Worse} from the grip to the heap. Therefore, this ability is active in the heap. However, if {card:I've Had Worse} is trashed, but the Corp uses {card:Skorpios Defense Systems} to remove it from the game instead of adding it to the heap, the ability is not active.
    - rule: rule_active_exception_modify_play_install_rez
      text: Abilities that modify when or if their source card can be played, installed, or rezzed are active even while that card is inactive.
    - rule: rule_active_exception_modify_cost
      text: Abilities that modify the cost to install, rez, or play their source card are active even while that card is inactive.
    - rule: rule_active_exception_advancement_requirement
      text: Abilities that define or modify the advancement requirement of their source card or create an additional cost to steal their source card are active even while that card is inactive.
    - rule: rule_active_exception_can_be_advanced
      text: Abilities allowing a card to be advanced are active even while that card is unrezzed.
    - rule: rule_active_exception_conditional_move_to_inactive_zone
      text: If an active card moves to a zone where it is inactive, an ability of that card with a trigger condition that is met by this zone change remains active in the card's new location until any corresponding instances of the ability resolve. See {ref:TODO} for information about instances of conditional abilities.
      examples:
      - text: The Runner uses {card:Singularity} to simultaneously trash a rezzed {card:Hostile Infrastructure} and 2 upgrades. Those cards are moved to Archives and become inactive, but {card:Hostile Infrastructure}'s ability remains active, and 3 instances will become pending, each doing 1 net damage when it resolves. Once all those instances are resolved, {card:Hostile Infrastructure}'s ability stops being active.
      - text: The Runner plays {card:Test Run} to install {card:Nanuq}. When their turn ends, {card:Test Run}'s delayed conditional ability adds {card:Nanuq} to the top of the Runner's stack. This meets the trigger condition of {card:Nanuq}'s first ability, which remains active until it resolves even though {card:Nanuq} itself is inactive in the stack. The ability will move {card:Nanuq} from the top of the stack to the removed-from-game zone.
    - rule: rule_active_exception_encounter_not_installed
      text: If a piece of ice is encountered while it is not installed, its subroutines are active during that encounter.
      examples:
      - text: The Runner accesses {card:Archangel} from HQ, and the Corp uses its ability to force the Runner to encounter it. {card:Archangel}'s subroutine is active and can resolve during that encounter.
    - rule: rule_active_exception_persistent
      text: Persistent abilities can sometimes remain active after their source card is trashed. See {ref:TODO}.

  - subsection: rule_gaining_losing_abilities
    text: Static abilities and lingering effects can make objects gain or lose abilities.
    rules:
    - rule: rule_lose_ability
      text: If an object loses an ability, that ability is completely ignored. If the lost ability is a subroutine, it is not considered by any effect that counts subroutines on that object.
    - rule: rule_determine_actual_abilities
      text: To determine the actual abilities present on an object (as well as its other characteristics), follow the procedure described in {ref:TODO}.
    - rule: rule_abilities_no_inherent_order
      text: Abilities on an object have no particular order, except for play abilities and subroutines. Play abilities cannot be added to or removed from an event or operation, and their order is the order they appear on their source card. To determine the order of subroutines on an object, refer to {ref:TODO}.

- section: sec_timing_and_priority
  text: Timing and Priority
  rules:
  - rule: rule_active_player
    text: The {term:active player} is the player whose turn it is. The other player is the {term:inactive_player}.

  - subsection: rule_timing_structure
    text: A {term:timing structure} is a unit of the game in which a prescribed sequence of steps progress the game forward.
    rules:
    - rule: rule_turn_timing_structure
      text: The Corp's turn and the Runner'ss turn are timing structures, as are each of the 3 phases of the turns. See {ref:chpt_turns}.
    - rule: rule_run_timing_structure
      text: A run is a timing structure, as are each of the 6 phases of a run. See {ref:chpt_runs}.
    - rule: rule_breaching_timing_structure
      text: Breaching a server is a timing structure. See {ref:TODO}.
    - rule: rule_accessing_timing_structure
      text: Accessing a card is a timing structure. See {ref:TODO}.
    - rule: rule_not_timing_structures
      text: Other procedures with prescribed steps, such as installing a card or resolving a trace attempt, are not timing structures.

  - rule: rule_priority
    text: |-
      {term:Priority} is a player's opportunity to act and make certain game choices. No more than one player can have priority at any given time.

  - subsection: rule_priority_window
    text: A {term:priority window} is a general term for a timing step in which one or both players receive priority. Priority windows {term:open} for different purposes throughout the game. When a priority window {term:closes}, the game continues to the next timing step.
    rules:
    - rule: rule_triggering
      text: All priority windows give the player with priority the option to choose a relevant ability they control (if there are any) as the next ability for the game to resolve. This is often referred to as {term:triggering} the chosen ability. Some priority windows also give players other options.
    - rule: rule_pass
      text: Except during action windows, the player with priority has the option to {term:pass} in addition to the available options defined by that priority window. When a player passes, the game progresses to the next step, either by giving priority to the other player or by closing the priority window. Each type of priority window defines the method and resolution of passing.
    - rule: rule_keep_priority_until_pass
      text: Unless otherwise noted, the player with priority receives priority again after resolving one of their available options. That player will continue to receive priority until they pass.
    - rule: rule_nested_priority_window
      text: While a priority window is open, another nested priority window can open as well. This nesting allows the game to resolve "chain reactions," as discussed in {ref:rule_chain_reaction}. The most recently opened priority window is always resolved before returning to an earlier priority window.
    - rule: rule_checkpoint_before_receiving_priority
      text: Whenever a player receives priority during a priority window, a checkpoint occurs immediately before that player may act. See {ref:sec_checkpoints}.

  - rule: rule_priority_window_types
    text: The types of priority windows are action windows, paid ability windows, reaction windows, interrupt windows, and mid-access ability windows.

  - subsection: rule_action_window
    text: An {term:action window} is a priority window that opens during a player's action phase if they have unspent clicks.
    rules:
    - rule: rule_action_window_priority
      text: An action window gives only the active player priority.
    - rule: rule_action_window_options
      text: During an action window, the active player must take an action. {ref:Sec_actions} discusses actions. This type of window does not give the option to pass.
    - rule: rule_action_window_closes_after_action
      text: After the active player takes an action, the action window closes and the game moves to the next timing step. The player does not receive priority again.
    - rule: rule_action_window_occurrence
      text: There are two timing steps during which an action window may open. The Corp has an action window in {ref:TODO} of their action phase. The Runner has an action window in {ref:TODO} of their action phase.

  - subsection: rule_paid_ability_window
    text: A {term:paid ability window} is a priority window that opens throughout the game's timing structures to allow players to trigger paid abilities, rez cards, or score agendas.
    rules:
    - rule: rule_ability_window_priority
      text: Paid ability windows give both players priority, starting with the active player. When a player passes, the other player receives priority. Players continue to exchange priority until a player who receives priority from their opponent passes without resolving any other option available to them. Once this happens, the paid ability window closes.
    - rule: rule_paid_ability_window_options
      text: During every paid ability window, the player with priority has the option to trigger an active paid ability they control. Players cannot trigger actions, interrupts, or mid-access abilities in a paid ability window. See {ref:sec_paid_abilities}. Within this document, paid ability windows are marked with the symbol (P) to denote the option to trigger a regular paid ability.
    - rule: rule_paid_ability_window_corp_rez
      text: During some paid ability windows, the Corp has the option to rez an asset or upgrade while they have priority. Within this document, the symbol (R) denotes a paid ability window in which cards can be rezzed. See {ref:sec_faceup_facedown_status}.
    - rule: rule_paid_ability_window_corp_score
      text: During some paid ability windows, the Corp has the option to score an agenda while they have priority. Within this document, the symbol (S) denotes a paid ability window in which agendas can be scored. See {ref:sec_score_scoring_steal}.
    - rule: rule_paid_ability_window_corp_rez_ice
      text: During the paid ability window at {ref:step_approach_paw} of the Approach Ice Phase of a run, the Corp has the option to rez the piece of ice the Runner is approaching while they have priority.
    - rule: rule_paid_ability_window_multiple_options
      text: The player with priority during a paid ability window may use any of the options available to them any number of times in any combination and order until they decide to pass, so long as they are allowed and the player pays any and all costs to use each option. Each option must be fully resolved before another is chosen. A player is not obligated to resolve any of the options available to them, except they must pass.
    - rule: rule_paid_ability_window_occurrence
      text: Paid ability windows occur throughout the timing steps of turns and runs. {ref:TODO} detail those steps and indicate which options are available in which windows. {ref:Chpt_appendix_timing_structures} also contains a summarized version of these steps.

  - subsection: rule_reaction_window
    text: A {term:reaction window} is a priority window that opens whenever one or more active conditional abilities become pending by meeting their conditions. {ref:Sec_conditional_abilities} discusses conditional abilities.
    rules:
    - rule: rule_reaction_window_linked_to_pending_conditional_abilities
      text: Each reaction window is associated with the fixed set of conditional abilities that met their conditions just before the window opened. If other abilities become pending during a reaction window, a separate reaction window opens to handle the new abilities. See {ref:rule_chain_reaction}.
    - rule: rule_reaction_window_priority
      text: Reaction windows give both players priority, starting with the active player. When the active player passes, the inactive player receives priority. When the inactive player passes, the reaction window closes.
    - rule: rule_reaction_window_options
      text: During a reaction window, the player with priority has the option to trigger a pending conditional ability they control that is associated with that window.
    - rule: rule_reaction_window_pending_abilities_unordered
      text: The player with priority during a reaction window may trigger their pending abilities in any order until they decide to pass; they do not need to trigger mandatory abilities before optional ones. Each ability they trigger must be fully resolved before another is chosen.
    - rule: rule_reaction_window_must_resolve_mandatory_abilities
      text: The player with priority cannot pass if they control any pending mandatory abilities. They may pass with optional conditional abilities still pending, in which case those abilities lose their pending status without being triggered. Section 9.6.9 describes the differences between mandatory and optional conditional abilities.
    - rule: rule_reaction_window_closing_timing_structure
      text: If a reaction window opens due to a timing structure beginning, and during that reaction window the timing structure ends (e.g. by an effect moving the game to another timing point past the end of the structure), then the reaction window immediately closes. All remaining abilities associated with the window lose their pending status without being triggered, even if they are mandatory abilities.
      examples:
      - text: The Runner has a {card:Femme Fatale} installed and chose a {card:Tollbooth} with its "when installed" ability. When the Runner encounters the {card:Tollbooth}, they pay 1[c] to bypass the {card:Tollbooth} with {card:Femme Fatale}. Because the resolution of {card:Femme Fatale}'s ability causes the encounter to end, the pending ability from {card:Tollbooth} cannot be triggered. The Runner does not pay 3[c], and the run does not end.

  - subsection: rule_interrupt_window
    text: An {term:interrupt window} is a priority window that opens just before an instruction would resolve when one or more players have abilities that could modify that imminent instruction. See {ref:sec_interrupts_replacements} for rules about interrupt abilities.
    rules:
    - rule: rule_interrupt_window_linked_to_imminent_instruction
      text: Each interrupt window is associated with the single imminent instruction being modified by the abilities triggered during the window, and with a fixed set of conditional ability interrupts determined as the window opens.
    - rule: rule_interrupt_window_opening
      text: As an interrupt window opens, before players receive priority, the expected effects of the imminent instruction are determined, any applicable replacement effects are applied, and then relevant conditional abilities become pending. See {ref:TODO}.
    - rule: rule_interrupt_window_priority
      text: Interrupt windows give both players priority, starting with the active player. When a player passes, the other player receives priority. Players continue to exchange priority until a player who receives priority from their opponent passes without resolving any other option available to them. Once this happens, the interrupt window closes.
    - rule: rule_interrupt_window_options
      text: During an interrupt window, the player with priority has the option to trigger an interrupt ability they control that is relevant to the imminent effect. See {ref:TODO}.
    - rule: rule_interrupt_window_abilities_unordered
      text: The player with priority during an interrupt window may trigger their abilities in any order until they decide to pass. They do not need to trigger mandatory abilities before optional abilities or trigger conditional abilities before paid abilities. Each ability they trigger must be fully resolved before another is chosen.
    - rule: rule_interrupt_window_must_resolve_mandatory_abilities
      text: The player with priority cannot pass if they control any pending mandatory abilities that are still relevant to the imminent effect. They may pass with optional conditional abilities still pending. ({ref:TODO} describes the differences between mandatory and optional conditional abilities.) Once a player has passed, if they receive priority again, they may continue to trigger paid abilities and pending conditional abilities that are relevant. As the interrupt window closes, any remaining pending conditional abilities lose their pending status.

  - subsection: rule_mid_access_window
    text: A {term:mid-access ability window} is a priority window that opens while the Runner is accessing a card.
    rules:
    - rule: rule_mid_access_window_priority
      text: A mid-access ability window gives only the Runner priority.
    - rule: rule_mid_access_window_options
      text: During a mid-access ability window, the Runner may use a mid-access ability or may pass. In addition to any mid-access abilities available from cards, the Runner may use the basic trash ability (see {ref:TODO}).
    - rule: rule_mid_access_window_one_ability
      text: After the Runner uses a mid-access ability or passes, the mid-access ability window closes and the game moves to the next timing step. The Runner does not receive priority again.
    - rule: rule_mid_access_window_occurrence
      text: The only point at which a mid-access ability window occurs is at {ref:TODO} of accessing a card.

- section: sec_interpreting_card_text
  text: Interpreting Card Text
  rules:
  - rule: rule_text_classification
    text: Text is classified into conditions, restrictions, instructions, declarations, and ability flags. The rules text of an ability can contain text in any combination of these classes, except that no ability contains both instructions and declarations.

  - subsection: rule_condition
    text: A {term:condition} is a unit of text that stipulates a requirement for when an ability's effects are allowed to apply.
    rules:
    - rule: rule_cost_condition
      text: A {term:cost condition} describes a cost (either a nested cost or a trigger cost) that a player must pay to apply an effect. Costs are discussed in detail in {ref:sec_costs}.
    - rule: rule_trigger_condition
      text: A {term:trigger condition} describes a change in game state that must occur for an effect to apply. Trigger conditions often begin with words such as "if", "when", "whenever", or "after", or with ordinal phrases such as "the first time".
    - rule: rule_static_condition
      text: A {term:static condition} describes a property of the game state that must be true for an effect to apply. Static conditions often begin with words such as "if", "during", or "while".

  - subsection: rule_restriction
    text: A {term:restriction} is a unit of text that applies one of a specific set of constraints for a card to be played or an ability to be used. If a restriction appears in an ability, it applies to the entire ability regardless of whether it is written before, after, or in the middle of the ability's other text. Many restrictions fall under {ref:rule_ability_active_inactive_source_card}, meaning they are active even while their source is inactive.
    rules:
    - rule: rule_modify_cost_restriction
      text: Text modifying the cost to play, install, rez, or steal the card it appears on is a restriction, including text that adds an additional cost.
    - rule: rule_act_restriction
      text: Constraints on when or where a card can be installed, rezzed, played, or scored are restrictions.
    - rule: rule_use_restriction
      text: Limits on when, where, or how often an ability can be used are restrictions.
    - rule: rule_pay_cost_restriction
      text: Constraints on how a cost can be paid are restrictions.
    - rule: rule_host_restriction
      text: If a card's text limits what cards it can host, the text describing that limit is a restriction. See also {ref:rule_host_via_ability}.
    - rule: rule_variable_restriction
      text: Definitions for or constraints on a variable are restrictions.
      examples:
      - text: Some abilities dictate a value for X, such as "X is the number of rezzed NEXT ice." Some abilities with X in their cost constrain the value that can be chosen for X, such as "X must be equal to or less than the number of tags the Runner has." These statements are restrictions.
    - rule: rule_cannot_be_prevented_restriction
      text: Stipulations that an effect or part of an effect cannot be prevented are restrictions.
    - rule: rule_no_restriction
      text: Any text not falling under one of the above categories is not a restriction.

  - subsection: rule_instruction
    text: An {term:instruction} is a statement or command that is resolved at a specific time and applies immediate effects to the game state. (This can include creating new lingering abilities or effects that will continue to apply over time; see {ref:sec_lingering_effects}.)
    rules:
    - rule: rule_instruction_source
      text: Instructions can originate from a game rule or from the text of an ability. An instruction in an ability resolves when that ability resolves (see {ref:rule_resolve_ability}). An instruction in the game rules resolves during the timing step(s) when it appears. {ref:Sec_identifying_instructions} explains how to determine the boundaries between consecutive instructions.
    - rule: rule_instruction_target
      text: If an instruction requires any targets, players announce those targets before that instruction becomes imminent. See {ref:sec_targets}.
    - rule: rule_instruction_atomic
      text: Each instruction is carried out as an atomic unit and cannot be interrupted once it begins to resolve. The procedure for carrying out an instruction can be altered by other effects such as interrupts, but only before the instruction begins to resolve. See {ref:sec_interrupts_replacements}.
    - rule: rule_resolve_instruction_in_order
      text: Other than choosing targets, carry out the steps of a single instruction in the order they are written.
    - rule: rule_instruction_lingering_effect
      text: Instructions in an ability can create effects that last beyond the resolution of the ability. See {ref:sec_lingering_effects}.

  - rule: rule_declaration
    text: A {term:declaration} is a statement describing an effect on components or game rules that is applied continuously. A declaration applies its effects as long as it is active.

  - subsection: rule_ability_flag
    text: An {term:ability flag} is a keyword or symbol that appears at the beginning of an ability. Ability flags are separated from the main text of the ability by an arrow (→). Each ability flag changes the rules for how the flagged ability functions.
    rules:
    - rule: rule_ability_flag_types
      text: |-
        There are four ability flags: access, interface, [interrupt], and persistent.
    - rule: rule_access_flag
      text: The "access" flag appears on Runner card paid abilities and affects the timing for triggering those abilities. The Runner can use abilities with this flag only during the mid-access ability window at {ref:TODO} of accessing a card. See {ref:rule_mid_access_window}.
    - rule: rule_interface_flag
      text: The "interface" flag appears on icebreaker paid abilities and affects the timing for triggering those abilities. The Runner can use abilities with this flag only during an encounter, and only if the ability's source is an icebreaker with strength that equals or exceeds the strength of the encountered ice. See {ref:subsec_icebreakers}.
    - rule: rule_interrupt_flag
      text: The interrupt flag ([interrupt]) appears on paid and conditional abilities and affects the timing for triggering those abilities. Players can use abilities with this flag only during interrupt windows, and only if the ability is relevant to the imminent instruction. See {ref:sec_interrupts_replacements}.
    - rule: rule_persistent_flag
      text: The "persistent" flag appears on Corp card abilities and changes the rules about when those abilities are active. An ability with this flag can persist until the end of the run after its source card is trashed. See {ref:TODO}.

  - subsection: rule_ability_classification
    text: The five types of abilities can be identified by the types of text they are made of.
    rules:
    - rule: rule_static_abilities_link
      text: Static abilities ({ref:sec_static_abilities}) can contain declarations, restrictions, and conditions, but never instructions. Static abilities are the only ability type that can contain declarations.
    - rule: rule_paid_abilities_link
      text: |-
        Paid abilities ({ref:sec_paid_abilities}) can always be identified by their formatting: a cost condition in bold text, a colon (:), then the remainder of the ability. The text after the colon can contain conditions, restrictions, and/or instructions.
    - rule: rule_conditional_abilities_link
      text: Conditional abilities ({ref:sec_conditional_abilities}) always contain a trigger condition or static condition and at least one instruction. They can also contain restrictions, other instructions, or nested conditions. The primary condition is often written with a timing-related word or phrase like "when", "after", "the first time", and so on, and is usually the first part of the ability's text. Some older cards write the condition at the end of the ability or use "if" to indicate the condition.
    - rule: rule_play_abilities_link
      text: Play abilities ({ref:sec_play_abilities}) are the abilities on events and operations that are not paid, conditional, or static abilities. They can contain conditions, restrictions, and/or instructions.
    - rule: rule_subroutines_link
      text: Subroutines ({ref:sec_subroutines}) always begin with the [sub] symbol, and can contain conditions, restrictions, and/or instructions.

- section: sec_static_abilities
  text: Static Abilities
  rules:
  - rule: rule_static_ability
    text: A {term:static ability} is an ability that continuously affects the game as long as it is active. Static abilities are the only type of ability that can contain declarations, and they do not resolve or have associated priority windows.
  - rule: rule_static_ability_with_condition
    text: If a static ability contains a static condition, then the constrained parts of the ability apply to the game state only if that condition is met.
  - rule: rule_static_ability_with_restriction
    text: Static abilities can include restrictions that apply to their source card. These restrictions are often active even while the card is inactive. See {ref:rule_ability_active_inactive_source_card}.
  - rule: rule_static_no_lingering_effects
    text: The effects of static abilities do not have durations and cannot directly create lingering effects (see {ref:sec_lingering_effects}).
    examples:
    - text: The runner controls {card:Puffer} with a hosted {card:Gebrselassie}. {card:Gebrselassie} changes the durations of abilities affecting its host's strength, so if the Runner uses {card:Puffer}'s paid ability to give it +1 strength, that increase will last for the remainder of the turn. {card:Gebrselassie} does not affect {card:Puffer}'s static ability that increases its strength for each hosted power counter, so if the Runner spends [click] to remove a power counter, then the increase in strength from {card:Puffer}'s static ability will immediately be lost.
  - rule: rule_static_modification_keep_restrictions
    text: Static abilities that modify a value maintain the same restrictions and specifications that were present on the original value.
    examples:
    - text: |-
        {card:The Cleaners} has a static ability that gives every instance of meat damage done by the Corp +1 to the amount of the damage. Part of {card:Flare}'s effect does 2 meat damage that can't be prevented. If this effect resolves while {card:The Cleaners} is active, then all 3 points of meat damage are unpreventable.

- section: sec_paid_abilities
  text: Paid Abilities
  rules:
  - rule: rule_paid_ability
    text: A {term:paid ability} is an ability players trigger at-will, during appropriate priority windows. In order to use a paid ability, the controller of that ability must pay its {term:trigger cost}. Paid abilities are always written with the trigger cost first, followed by a colon (:), followed by the remainder of the ability's text.

  - subsection: rule_trigger_paid_abilities
    text: A player can trigger paid abilities they control while they have priority in an appropriate priority window.
    rules:
    - rule: rule_action
      text: If the trigger cost of a paid ability begins with a [click] symbol, the ability is an {term:action}. A player can use one action paid ability during each action window on their turn. See {ref:rule_action_window} and {ref:TODO}.
    - rule: rule_interrupt
      text: If the [interrupt] flag appears before a paid ability's trigger cost, that ability is an interrupt. A player can use interrupt paid abilities during appropriate interrupt windows. Each such ability can be used as many times as its effects could apply to the imminent instruction. See {ref:sec_interrupts_replacements}.
    - rule: rule_mid_access_ability
      text: If the "access" flag appears before a paid ability's trigger cost, that ability is a mid-access ability. The Runner can use up to 1 mid-access ability during the mid-access ability window at {ref:TODO} of accessing a card.
    - rule: rule_interface_ability
      text: If the "interface" flag appears before a paid ability's trigger cost, that ability is an Interface ability and is subject to the restrictions of icebreakers discussed in {ref:subsec_icebreakers}. Interface abilities do not have a special priority window type.
    - rule: rule_other_paid_abilities
      text: A paid ability that is not an action, interrupt, or mid-access ability can be used during a paid ability window. Each such ability can be used an unlimited number of times as long as its cost is paid each time and any restrictions specified by its effect are observed.

  - subsection: rule_paid_ability_optional
    text: Paid abilities are always optional. A paid ability and its source are considered used when the ability's trigger cost is paid.
    rules:
    - rule: rule_forced_mid_access_ability_optional
      text: Mid-access abilities the Runner is forced to trigger still count as optional abilities. See also {ref:TODO}.
      examples:
      - text: The Corp resolves the subroutine on {card:Wendigo}, prohibiting the Runner from using their installed {card:Imp} for the remainder of the run. Later, the Runner accesses an installed {card:Mumbad Virtual Tour}. Even though {card:Mumbad Virtual Tour} forces the Runner to trash it if able, {card:Imp}'s ability is still optional for purposes of {card:Wendigo}'s prohibition. Since {card:Imp}'s ability cannot be used at all this run, {card:Mumbad Virtual Tour} cannot compel the Runner to spend one of its hosted virus counters. If the Runner can pay the cost of another mid-access ability, such as the basic trash ability, the Runner must use that ability. If not, the Runner will not be able to trash {card:Mumbad Virtual Tour} at all.

  - rule: rule_paid_ability_independent
    text: Once a player pays the trigger cost of a paid ability, that ability becomes independent of its source and {ref:rule_abilities_resolution_independent} applies to it.
  - rule: rule_trash_ability_keeps_track_of_hosted_objects
    text: If the trigger cost of a paid ability uninstalls or forfeits the source of that paid ability, and the effects of that paid ability refer to or act on cards or counters hosted on that source, set aside any hosted cards and counters as the trigger cost is paid. The set-aside cards or counters are still considered "hosted" for purposes of this ability, but they are not trashed due to not having a host for as long as the ability is resolving. When the ability finishes resolving, if any of those cards or counters are still set aside, they are trashed during {ref:TODO} or {ref:TODO} of the next checkpoint, as appropriate. Other abilities cannot interact with these cards or counters while they are set aside (see {ref:rule_set_aside_zone_passthrough}).
    examples:
    - text: The Runner has {card:Fermenter} installed with 4 hosted virus counters. They use its paid ability, which has a cost that includes trashing {card:Fermenter}. As the Runner pays this cost, they set aside the 4 counters. When the ability resolves and refers to the number of hosted virus counters, it includes the counters that were set aside, so the Runner gains 8 credits. When the ability is finished resolving, the counters are returned to the bank.
    - text: |-
        The Runner uses the [trash] ability on {card:Street Peddler}. They pay the trigger cost and set the 3 hosted cards aside. When the ability resolves, the Runner installs one of the set-aside cards. Since the other two cards are still set aside, the next checkpoint trashes them just as in any other case of cards that were hosted on a card that is no longer installed. No other abilities are able to tell that the cards were set aside: they are treated as having been installed or trashed from their previous location in the play area.
    - text: This example describes a situation similar to the previous examples, but covers the sequence of steps the game carries out in a higher level of detail. The Corp has priority in a paid ability window, and chooses to trigger the [trash] ability on {card:Reconstruction Contract}. As they pay the trigger cost, moving {card:Reconstruction Contract} to Archives, they set aside the advancement counters hosted on {card:Reconstruction Contract}. Next, a checkpoint occurs following the cost having been paid. After that checkpoint and any corresponding reaction window, the [trash] ability's instruction is ready to become imminent. The Corp chooses a card they can advance to be the instruction's target, and an interrupt window opens. After the interrupt window (assuming the effects of the instruction are not prevented), the Corp moves the set-aside counters to the target card.

  - subsection: sec_steps_of_using_a_paid_ability
    text: Steps of Using a Paid Ability
    toc:
    steps:
    rules:
    - rule: step_paid_ability_announce
      text: Announce the intent to trigger the paid ability.
    - rule: step_paid_ability_condition
      text: Pay the trigger cost. The ability and its source are considered used. "When used" abilities meet their trigger conditions. (The cost-paid checkpoint then occurs.)
    - rule: step_paid_ability_target_first_instruction
      text: Announce any targets for the ability's first instruction. That instruction then becomes imminent.
    - rule: step_paid_ability_interrupt_window
      text: An interrupt window occurs, during which abilities can modify, prevent, or avoid the imminent effects.
    - rule: step_paid_ability_resolution
      text: Resolve the instruction, applying any changes to its effects from interrupts that were resolved.
    - rule: step_paid_ability_checkpoint
      text: A checkpoint occurs.
    - rule: step_paid_ability_loop
      text: If there are more instructions to resolve, announce any targets for the next instruction. That instruction then becomes imminent. Return to (d).
    - rule: step_paid_ability_complete
      text: Resolution of the paid ability is complete.

- section: sec_conditional_abilities
  text: Conditional Abilities
  rules:
  - subsection: rule_conditional_ability
    text: A {term:conditional ability} is an ability that a player can or must trigger at a specific point in the game. Conditional abilities always include a primary condition and one or more instructions, but they have no special syntax requirements.
    rules:
    - rule: rule_primary_condition
      text: The primary condition of a conditional ability is usually a trigger condition, but can also be a static condition.
    - rule: rule_primary_condition_front
      text: The primary condition of a conditional ability is often, but not always, written at the front of the ability. See {ref:rule_conditional_abilities_link} for details about conditional ability syntax.

  - rule: rule_pending_instances
    text: When a conditional ability has met its condition, one or more {term:instances} of that conditional ability is created {term:pending} in the next reaction window that opens. Each instance of a conditional ability is a separate copy of that ability that resolves independently of the others. An instance of an ability with the pending status is waiting for its controller to trigger it.
  - rule: rule_static_condition_one_instance
    text: A conditional ability with a static condition can only have one instance at a time.

  - subsection: rule_trigger_condition_multiple_instances
    text: A conditional ability with a trigger condition can have multiple instances.
    rules:
    - rule: rule_condition_met_with_pending_instances
      text: If a trigger condition is met again while an instance of the corresponding ability is already pending, imminent, or resolving, a new instance can still become pending in the next reaction window.
    - rule: rule_condition_met_multiple_times
      text: If the trigger condition of an ability is met more than once between consecutive checkpoints, multiple instances of that ability become pending in the next reaction window.
      examples:
      - text: The Runner plays {Card:Singularity}, trashing 3 Corp cards simultaneously. Since {card:Hostile Infrastructure}'s trigger condition is met separately for each card trashed, the next checkpoint handles all of those occurrences, and 3 instances of the ability become pending in the same reaction window.
      - text: The Runner controls {card:Blackguard} and plays {card:Satellite Uplink}, exposing 2 cards in a single instruction. In the next checkpoint, two instances of {card:Blackguard}'s ability become pending, one corresponding to each card that was exposed.

  - subsection: rule_trigger_description
    text: The trigger condition of most conditional abilities describes an occurrence that allows it to become pending. These rules about trigger conditions also apply to conditional abilities with static conditions, except as described in {ref:rule_conditional_ability_with_static_condition}.
    rules:
    - rule: rule_condition_checked_in_checkpoints
      text: During each checkpoint, the game checks whether any conditional abilities have met their trigger conditions. If any have, a reaction window opens to resolve those abilities (See {ref:sec_checkpoints}). This reaction window is fully resolved and closed before the game proceeds to the next instruction of the original effect or game rule.
    - rule: rule_condition_only_met_while_active
      text: A conditional ability can only recognize its trigger condition occurring if the ability is active at the time the trigger condition resolves. If a conditional ability becomes active after the point when its trigger condition was met, that ability does not become pending, even if other abilities sharing that trigger condition are still pending.
    - rule: rule_condition_requirements_part_of_condition
      text: A conditional ability can only recognize its trigger condition occurring if all the stipulations and requirements listed in the trigger condition are met at the moment that the trigger condition would occur.
      examples:
      - text: The entire trigger condition on {card:Quantum Predictive Model} is "If the Runner is tagged when {card:Quantum Predictive Model} is accessed". {card:Quantum Predictive Model} can only meet its trigger condition if the Runner is tagged at the time the access occurs. Even if {card:Casting Call} is hosted on {card:Quantum Predictive Model}, the tag will be given after the access begins, and no ordering of the abilities will allow {card:Quantum Predictive Model} to meet its trigger condition.
    - rule: rule_condition_requirements_part_of_effect
      text: Additional stipulations and requirements listed in the instructions of a conditional ability are checked as part of the ability's effects and are not part of the ability's trigger condition. For the effects under the scope of this kind of condition to resolve, the condition only needs to be met when the relevant instructions resolve. This can occur even if some or all of those conditions were not met at the time the ability met its trigger condition.
      examples:
      - text: If a Runner with 1 link has both {card:Underworld Contact} installed and {card:The Supplier} installed hosting a {card:Dyson Mem Chip}, both {card:Underworld Contact} and {card:The Supplier} meet their trigger conditions at the same time. The Runner can trigger {card:The Supplier} first, installing the Dyson Mem Chip, thus allowing {card:Underworld Contact} to recognize that the Runner has 2 link and give them 1 credit, even though the Runner did not have 2 link at the time the {card:Underworld Contact} became pending.
    - rule: rule_condition_if_successful
      text: The phrase "If successful" in reference to a run is a trigger condition with specific rules. See {ref:rule_if_successful}. The phrases "If successful" and "If unsuccessful" are also frequently used as trigger conditions relating to the results of a trace. See {ref:TODO}.

  - rule: rule_trigger_condition_checked
    text: Trigger conditions look for an instantaneous change in the game state. The next checkpoint after that change takes place marks an instance of the ability as pending for each occurrence of the change that was looked for.

  - subsection: rule_conditional_ability_with_static_condition
    text: Conditional abilities with a static condition instead of a trigger condition describe an effect that must be performed repeatedly, if possible, while the condition is true. Such abilities usually attempt to end their own repetition by uninstalling their source.
    rules:
    - rule: rule_conditional_ability_check_to_become_pending
      text: During each checkpoint, the game checks whether any conditional abilities with static conditions should become pending, alongside conditional abilities with trigger conditions. However, there are further requirements for this kind of ability to be marked pending.
    - rule: rule_conditional_ability_check_start_of_checkpoint
      text: A conditional ability with a static condition can only be marked pending during a checkpoint if the condition is true at the beginning of that checkpoint.
    - rule: rule_conditional_ability_static_one_instance
      text: A conditional ability with a static condition can only be marked pending if no other instance of the same ability from the same source is already pending, imminent, or resolving.
    - rule: rule_conditional_ability_static_condition_ncigs
      text: A conditional ability with a static condition can only be marked pending if the instructions in the ability have the potential to change the game state.
      examples:
      - text: |-
          {card:Parasite} is hosted on a piece of ice with 0 strength. {card:Parasite}'s ability tries to trash that ice. If the effect of an interrupt ability prevents the ice from being trashed without increasing its strength, the condition is still true, so the ability will become pending again. But this does not occur while the previous instance of the ability is still pending or resolving. Conversely, if a static ability (such as the one on Architect) prohibits {card:Parasite} from trashing the ice, {card:Parasite}'s ability does not have the potential to change the game state, and therefore it does not become pending.

  - subsection: rule_trigger_conditional_ability
    text: A player can trigger a conditional ability while they have priority in a reaction window in which the ability is pending.
    rules:
    - rule: rule_triggered_ability_loses_pending
      text: Once a player triggers a conditional ability, that instance of the ability loses its pending status. Other pending instances of the ability are unaffected and can still be triggered later, regardless of whether those instances are associated with the same reaction window.
    - rule: rule_conditional_ability_interrupt
      text: If the [interrupt] symbol appears before a conditional ability's text, that ability is an interrupt. These abilities will become pending in interrupt windows rather than reaction windows, but are otherwise resolved in the same way as non-interrupt conditional abilities. See {ref:sec_interrupts_replacements}.

  - subsection: rule_optional_conditional_ability
    text: If a conditional ability gives its controller a choice of whether to apply its effects, such that the ability could potentially have no effects at all, it is considered an {card:optional conditional ability}. These abilities can usually be recognized by the presence of permissive words such as "may" or "allows", or by a restriction such as "Use this ability only once per turn." If the ability is not optional, then it is a {card:mandatory conditional ability}.
    rules:
    - rule: rule_pass_with_optional_conditional_abilities_pending
      text: Instances of optional conditional abilities can still be pending when their controller passes in the corresponding priority window. Players are not required to trigger optional conditional abilities.
    - rule: rule_cannot_pass_with_mandatory_conditional_abilities_pending
      text: Players must trigger all instances of pending mandatory conditional abilities they control in a given priority window before they can pass in that window. See {ref:rule_reaction_window}.
    - rule: rule_mandatory_conditional_ability_with_optional_effects
      text: Both optional and mandatory conditional abilities may have optional parts to their effects. Even if triggering the ability is mandatory, its controller may still decline any optional constituent effects that arise during its resolution.
    - rule: rule_optional_conditional_ability_use
      text: A conditional ability and its source are considered used when any optional component of the ability's effects is carried out.

  - rule: rule_conditional_ability_lose_pending_when_ability_becomes_inactive
    text: If any instances of a conditional ability are pending and the conditional ability itself becomes inactive, those instances lose their pending status and will not resolve.
    examples:
    - text: The Runner has both {card:Aesop's Pawnshop} and {card:Drug Dealer} installed. Both cards have abilities that meet their trigger conditions when the Runner's turn begins. If the Runner chooses to trigger {card:Aesop's Pawnshop} first, and then uses it to trash {card:Drug Dealer}, {card:Drug Dealer}'s pending ability can never be triggered, so the Runner does not lose a credit.
  - rule: rule_conditional_ability_lose_pending_when_priority_window_closes
    text: If a priority window closes while any abilities still have pending instances associated with that window, the remaining instances lose their pending status and cannot be triggered or resolved. See {ref:rule_reaction_window_closing_timing_structure}.
  - rule: rule_conditional_ability_independent
    text: Once a player triggers a conditional ability and its instructions become imminent, the ability becomes independent of its source and {ref:rule_abilities_resolution_independent} applies to it.

  - subsection: rule_delayed_conditional_ability
    text: A {term:delayed conditional ability} is a conditional ability maintained by a lingering effect (see {ref:sec_lingering_effects}). Unlike other lingering effects, some delayed conditional abilities are created without an explicitly stated duration.
    rules:
    - rule: rule_delayed_conditional_ability_if_successful_duration
      text: If an "if successful" ability contains a nested delayed conditional ability referring to breaching the attacked server, that ability applies to the breach at {ref:step_breach} of the run the "if successful" ability is associated with. Its duration expires at the end of the run. See {ref:rule_if_successful}.
    - rule: rule_delayed_conditional_ability_specified_duration
      text: If an instruction creates a delayed conditional ability and specifies a duration, the delayed conditional ability is active until that duration expires.
      examples:
      - text: |-
          {card:In the Groove} creates a delayed conditional ability that specifies a duration of "this turn". Since a duration is specified, it is not limited to only being triggered once. The ability becomes pending and can resolve every time its trigger condition is met, and its existence only expires at the end of the turn.
    - rule: rule_delayed_conditional_ability_relevant_once
      text: Any other delayed conditional ability exists until the next time it resolves, after which it expires.
      examples:
      - text: |-
          {card:Joshua B}'s ability allows the Runner to gain [click]. If they do, it creates a delayed conditional ability that is independent of {card:Joshua B} itself, which will meet its trigger condition only once, when that turn ends. After that ability resolves, the game no longer maintains the lingering effect creating the ability.

  - subsection: sec_steps_of_triggering_and_resolving_a_conditional_ability
    text: Steps of Triggering and Resolving a Conditional Ability
    toc:
    steps:
    rules:
    - rule: step_conditional_ability_announce
      text: Announce that you will trigger one of the pending abilities associated with the reaction window that gave you priority.
    - rule: step_conditional_ability_target_first_instruction
      text: Announce any targets for the ability's first instruction. That instruction then becomes imminent.
    - rule: step_conditional_ability_interrupt_window
      text: An interrupt window occurs, during which abilities can modify, prevent, or avoid the imminent effects.
    - rule: step_conditional_ability_resolution
      text: Resolve the instruction, applying any changes to its effects from interrupts that were resolved. If the controller of the ability chooses to resolve an optional effect contained in this instruction, and this is the first instruction for which that player has done so, "when used" conditionals meet their trigger conditions.
    - rule: step_conditional_ability_checkpoint
      text: A checkpoint occurs.
    - rule: step_conditional_ability_loop
      text: If there are more instructions to resolve, announce any targets for the next instruction. That instruction then becomes imminent. Return to (c).
    - rule: step_conditional_ability_complete
      text: Resolution of the conditional ability is complete.

- section: sec_play_abilities
  text: Play Abilities

- section: sec_subroutines
  text: Subroutines

- section: sec_interrupts_replacements
  text: Interrupts and Replacement Effects

- section: sec_lingering_effects
  text: Lingering Effects

- section: sec_identifying_instructions
  text: Identifying Instructions
  snippet: |-
    To correctly resolve conditional abilities and interrupts that could meet their trigger conditions during the resolution of another ability (see {ref:rule_chain_reaction}), players need to determine where checkpoints occur during the resolution of each ability. This section aids players in making this determination. For clarifications on particular cards, refer to the Rulings section of that card's page on {link:netrunnerdb.com|https://www.netrunnerdb.com}.
